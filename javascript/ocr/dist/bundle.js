/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={913:e=>{function t(e){return!(!e||"INPUT"!==e.tagName&&"TEXTAREA"!==e.tagName&&!e.isContentEditable)}e.exports=class{constructor(e){this.apiKey=e.apiKey||"REVERIE_API_KEY",this.appId=e.appId||"REVERIE_APP_ID",this.baseUrl=e.baseUrl||"https://revapi.reverieinc.com/",this.isListening=!1;let t=document.createElement("script");t.src="https://cdn.jsdelivr.net/npm/reverie-stt-sdk/dist/bundle.js",document.body.appendChild(t)}async transliterate({text:e,src_lang:t,tgt_lang:r,domain:a=1}){try{if(!t)throw new Error("Source language is required");if(!r)throw new Error("Target language is required");if(!e)throw new Error("Text to transliterate is required");let n=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","REV-API-KEY":this.apiKey,"REV-APP-ID":this.appId,src_lang:t,tgt_lang:r,domain:a,cnt_lang:"en","REV-APPNAME":"transliteration"},body:JSON.stringify({data:[e],isBulk:!1,ignoreTaggedEntities:!1})});if(n=await n.json(),n&&n.responseList&&n.responseList.length>0)return n.responseList[0].outString[0];throw new Error("Failed to transliterate text")}catch(e){return e.message}}async analyze_text({text:e,src_lang:t,tgt_lang:r,translation_domain:a,moderation_types:n}){try{if(!t)throw new Error("Content language is required");if(!e)throw new Error("Text is required for text analysis");const o=`${this.baseUrl}api/v2/text-analyse?translate=true&summary=true&sentiment=false&detect_entities=true&content_safety=true&pii_redaction=true`,i={"Content-Type":"application/json","REV-API-KEY":this.apiKey,"REV-APP-ID":this.appId,"REV-APPNAME":"text-analysis"},s={text:e,language:t,pii_redaction:{redact_pii_sub:"entity_name",redact_pii_types:[]},summary:{summary_model:"gemma2:2b",summary_type:"gist"},entity_recognition:{entity_types:[]},sentiment:{level:"whole"},content_moderation:{moderation_types:n||["hate_speech","profanity"]}};r&&(s.traslation={target_language:r,translation_domain:a||"generic"});let l=await fetch(o,{method:"POST",headers:i,body:JSON.stringify(s)});if(l=await l.json(),l&&l.results)return l.results;throw new Error("Failed to analyze text")}catch(e){return e.message}}async identify_language_by_text({text:e}){try{if(!e)throw new Error("Text to identify is required");if(e.length>512)throw new Error("Text exceeds maximum length of 512 characters");let t=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","REV-API-KEY":this.apiKey,"REV-APP-ID":this.appId,"REV-APPNAME":"lang_id_text"},body:JSON.stringify({text:e,max_length:Math.pow(2,Math.floor(Math.sqrt(e.length))+1)})});if(t=await t.json(),t)return t;throw new Error("Failed to detect text")}catch(e){return e.message}}async translate({text:e,src_lang:t,tgt_lang:r,domain:a}){try{if(!t)throw new Error("Source language is required");if(!r)throw new Error("Target language is required");if(!e)throw new Error("Text to translate is required");let n=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","REV-API-KEY":this.apiKey,"REV-APP-ID":this.appId,src_lang:t,tgt_lang:r,domain:a||"generic","REV-APPNAME":"localization","REV-APPVERSION":"3.0"},body:JSON.stringify({data:[e],nmtMask:!0,nmtMaskTerms:{},enableNmt:!0,enableLookup:!0})});if(n=await n.json(),n&&n.responseList&&n.responseList.length>0)return n.responseList[0].outString;throw new Error("Failed to translate text")}catch(e){return e.message}}async stt_batch({audioFile:e,src_lang:t,domain:r}){try{if(!t)throw new Error("Source language is required");if(!e)throw new Error("File to transcribe is required");const a=new FormData;a.append("audio_file",e);let n=await fetch("https://revapi.reverieinc.com/",{method:"POST",headers:{src_lang:t,domain:r||"generic","REV-APPNAME":"stt_file","REV-API-KEY":this.apiKey,"REV-APP-ID":this.appId},body:a});if(n=await n.json(),n&&n.display_text)return n.display_text;throw new Error("Failed to transcribe text")}catch(e){return e.message}}async text_to_speech({text:e,speaker:t,speed:r,pitch:a,format:n="WAV"}){try{if(!t)throw new Error("Speaker is required for TTS");if(!e)throw new Error("Text is required for TTS");if(!["WAV","MP3"].includes(n))throw new Error("Invalid audio format. Supported formats are wav and mp3");const o={text:e,speed:parseFloat(r),pitch:parseFloat(a),format:"WAV",speaker:t};let i=await fetch(this.baseUrl,{method:"POST",headers:{"Content-Type":"application/json","REV-API-KEY":this.apiKey,"REV-APP-ID":this.appId,"REV-APPNAME":"tts",speaker:t},body:JSON.stringify(o)}),s=await i.blob();if(i)return s;throw new Error("Failed to do tts for the text")}catch(e){return e}}async init_stt({src_lang:e,domain:r,silence:a,continuous:n,logging:o,timeout:i,callback:s,element:l}){if(!e)throw new Error("Source language is required for STT");if(!s&&!l)throw new Error("Callback or element is required for STT");if(s&&"function"!=typeof s)throw new Error("Callback must be a function");if(l&&"object"!=typeof l)throw new Error("Element must be a DOM element");if(r&&"string"!=typeof r)throw new Error("Domain must be a string");if(a&&"number"!=typeof a)throw new Error("Silence must be a number");if(n&&"boolean"!=typeof n)throw new Error("Continuous must be a boolean");if(o&&"boolean"!=typeof o)throw new Error("Logging must be a boolean");if(i&&"number"!=typeof i)throw new Error("Timeout must be a number");try{await window.stt_stream.initSTT({apikey:this.apiKey,appId:this.appId,language:e,domain:r||"generic",silence:a||1,continuous:n||1,logging:!o||!1!==o,timeout:i||180,eventHandler:r=>function(e,r,a,n){let o=e.data;a&&t(a)&&("FINAL_RESULT"===e.event||"PARTIAL_RESULTS"===e.event&&["es-ES","fr-FR","ar-SA"].includes(n))&&document.execCommand("insertText",!1,o),a&&!t(a)||!r||r({stt_event:{...e}})}(r,s,l,e),errorHandler:e=>console.error("Error:",e)}),console.log("STT Streaming initialized successfully")}catch(e){console.error("STT Initialization failed:",e)}}async start_stt(){await window.stt_stream.startSTT(),this.isListening=!0}async stop_stt(){await window.stt_stream.stopSTT(),this.isListening=!1}async toggle_stt(){this.isListening?await this.stop_stt():await this.start_stt()}async translateDocument({sourceLanguage:e,targetLanguage:t,uploadedFile:r}){try{const a=new FormData;a.append("sourceLanguage",e||"english"),a.append("targetLanguage",t||"hindi"),a.append("projectFiles",r);const n=await fetch("https://revapi.reverieinc.com/translate_doc_import",{method:"POST",headers:{"REV-APP-ID":this.appId,"REV-APPNAME":"nmt","REV-API-KEY":this.apiKey},body:a}),o=await n.json();if(n.ok&&o.projectId)return this.checkStatus(o.projectId,t);throw new Error("Error in translation process")}catch(e){throw new Error("Translation failed: "+e.message)}}async checkStatus(e,t){return new Promise(((r,a)=>{const n=async()=>{try{const a=await fetch(`https://revapi.reverieinc.com/translate_doc_status?doc_id=${e}`,{headers:{"REV-APP-ID":this.appId,"REV-APPNAME":"nmt","REV-API-KEY":this.apiKey}}),o=await a.json();o.success&&"completed"===o.message?r(this.downloadTranslatedFile(e,t)):setTimeout(n,2e3)}catch(e){a(new Error("Error checking status: "+e.message))}};n()}))}async downloadTranslatedFile(e,t){try{const r=await fetch("https://revapi.reverieinc.com/translate_doc_export",{method:"POST",headers:{"Content-Type":"application/json","REV-APP-ID":this.appId,"REV-APPNAME":"nmt","REV-API-KEY":this.apiKey},body:JSON.stringify({unitId:e,targetLanguages:[t]})}),a=await r.json();if(a.success)return Object.values(a.data.targetURLS).forEach((e=>{Object.values(e).forEach((e=>{window.open(e,"_blank")}))})),"Translation complete! File is ready for download.";throw new Error("Error downloading translation")}catch(e){throw new Error("Download failed: "+e.message)}}async uploadDocument({file:e,file_type:t,languages:r,ocr_type:a}){try{if(!e)throw new Error("Please select a file");if(!t||"pdf"!==t&&"img"!==t)throw new Error("Invalid file_type. Must be 'pdf' or 'img'");if(!r)throw new Error("Languages parameter is required");if(!a||"layout_ocr"!==a&&"only_ocr"!==a)throw new Error("Invalid ocr_type. Must be 'layout_ocr' or 'only_ocr'");if("img"===t&&"layout_ocr"===a)throw new Error("Layout OCR is not supported for images. Please select Only OCR.");const n=new FormData;n.append("file",e),n.append("file_type",t),n.append("languages",r),n.append("ocr_type",a);let o=await fetch(this.baseUrl+"/process_doc",{method:"POST",headers:{"REV-APP-ID":this.appId,"REV-API-KEY":this.apiKey,"REV-APPNAME":"ocr"},body:n});return"layout_ocr"===a?await o.blob():await o.text()}catch(e){return e.message}}async uploadAudio({file:e}){try{if(!e)throw new Error("Please select an audio file");const t=new FormData;t.append("audio_file",e);let r=await fetch(this.baseUrl+"/upload",{method:"POST",headers:{"REV-API-KEY":this.apiKey,"REV-APP-ID":this.appId,"REV-APPNAME":"slid"},body:t}),a=await r.json();if(!a.success)throw new Error(a.cause);return{transcriptionId:a.id,language:a.language,confidence:a.confidence}}catch(e){throw e}}}}},t={};function r(a){var n=t[a];if(void 0!==n)return n.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var a=r(913),n=r.n(a);document.getElementById("uploadBtn").addEventListener("click",(async()=>{const e=document.getElementById("fileInput").files[0],t=document.getElementById("languageSelect"),r=Array.from(t.selectedOptions).map((e=>e.value)).join(","),a=document.getElementById("ocrTypeSelect").value,o=document.getElementById("response"),i=document.getElementById("loader"),s=new(n())({apiKey:"da1c12acfee8a204cf6a135ec0157d6adaffd478",appId:"com.npmpackage"});if(!e)return void alert("Please select a file");const l="application/pdf"===e.type?"pdf":"img";if("img"!==l||"layout_ocr"!==a){o.textContent="",i.style.display="block";try{const t=await s.uploadDocument({file:e,file_type:l,languages:r,ocr_type:a});if("layout_ocr"===a){const e=window.URL.createObjectURL(t),r=document.createElement("a");r.href=e,r.download="output.docx",document.body.appendChild(r),r.click(),window.URL.revokeObjectURL(e),o.textContent="File downloaded successfully."}else o.textContent=t}catch(e){console.error("Error:",e),o.textContent="Error occurred while processing"}finally{i.style.display="none"}}else alert("Layout OCR is not supported for images. Please select Only OCR.")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,